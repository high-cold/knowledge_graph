:ID,page:long,url,name,definition,feature,:LABEL
0,371,https://www.bilibili.com/video/BV1nJ411V7bd?p=149&vd_source=5632e926204c9c83c01af7975745ede3,平衡二叉树的查找,,,point
1,,,平衡二叉树的打印,,,point
2,371,,B-树,在计算机科学中，B树（英语：B-tree）是一种自平衡的树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在对数时间内完成。B树，概括来说是一个一般化的二叉查找树（binary search tree），可以拥有多于2个子节点。,与自平衡二叉查找树不同，B树为系统大块数据的读写操作做了优化。B树减少定位记录时所经历的中间过程，从而加快存取速度。B树这种数据结构可以用来描述外部存储。这种数据结构常被应用在数据库和文件系统的实现上。,point
3,373,,B-树的插入,,,point
4,377,,B-树的删除,,,point
5,372,,B-树的查找,,,point
6,,,B-树的打印,,,point
7,379,,B+树,B+树是B树的一种变形形式，B+树上的叶子结点存储关键字以及相应记录的地址，叶子结点以上各层作为索引使用。一棵m阶的B+树定义如下:1、每个结点至多有m个子女；2、除根结点外，每个结点至少有[m/2]个子女，根结点至少有两个子女；3、有k个子女的结点必有k个关键字。,B+树的查找与B树不同，当索引部分某个结点的关键字与所查的关键字相等时，并不停止查找，应继续沿着这个关键字左边的指针向下，一直查到该关键字所在的叶子结点为止,point
8,,,B+树的插入,,,point
9,,,B+树的删除,,,point
10,,,B+树的查找,,,point
11,,,B+树的打印,,,point
13,386,https://www.bilibili.com/video/BV1nJ411V7bd?p=154&vd_source=5632e926204c9c83c01af7975745ede3,散列函数,,,point
14,386,,构造方法,,,point
15,,https://www.bilibili.com/video/BV1nJ411V7bd?p=155&vd_source=5632e926204c9c83c01af7975745ede3,散列表,散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希（Hash）表，函数f(key)为哈希(Hash) 函数。,哈希表底层数据结构是数组；哈希表不能存储基本数据类型，哈希表存储的元素具有唯一性；哈希表存储元素的过程是先判断要存储的元素与已有元素的hashcode是不是相同。,point
16,389,,冲突处理,,,point
19,399,,排序时间复杂度,,,point
20,399,,排序空间复杂度,,,point
21,399,,稳定性,,,point
23,401,https://www.bilibili.com/video/BV1nJ411V7bd?p=160&vd_source=5632e926204c9c83c01af7975745ede3,直接插入排序,,,point
24,403,https://www.bilibili.com/video/BV1nJ411V7bd?p=160&vd_source=5632e926204c9c83c01af7975745ede3,折半插入排序,,,point
26,404,https://www.bilibili.com/video/BV1nJ411V7bd?p=162&vd_source=5632e926204c9c83c01af7975745ede3,希尔排序,,,point
28,416,https://www.bilibili.com/video/BV1nJ411V7bd?p=171&vd_source=5632e926204c9c83c01af7975745ede3,归并排序,,,point
30,406,https://www.bilibili.com/video/BV1nJ411V7bd?p=163&vd_source=5632e926204c9c83c01af7975745ede3,冒泡排序,冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行，直到没有相邻元素需要交换，也就是说该元素列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。,冒泡排序是稳定排序，空间复杂度低，时间复杂度高。,point
31,407,https://www.bilibili.com/video/BV1nJ411V7bd?p=164&vd_source=5632e926204c9c83c01af7975745ede3,快速排序,快速排序（Quicksort）是对冒泡排序的一种改进，由东尼·霍尔在1960年提出。 快速排序是指通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序。整个排序过程可以递归进行，以此达到整个数据变成有序序列。,快速排序是不稳定排序。,point
33,410,https://www.bilibili.com/video/BV1nJ411V7bd?p=166&vd_source=5632e926204c9c83c01af7975745ede3,简单选择排序,选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。,选择排序是不稳定的排序方法。,point
34,411,https://www.bilibili.com/video/BV1nJ411V7bd?p=169&vd_source=5632e926204c9c83c01af7975745ede3,堆排序,堆排序（英语:Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点,树形选择排序，时间复杂度O(nlogn)，空间复杂度O(1),point
36,,https://www.bilibili.com/video/BV1nJ411V7bd?p=172&vd_source=5632e926204c9c83c01af7975745ede3,多关键字基数排序,,,point
37,419,https://www.bilibili.com/video/BV1nJ411V7bd?p=172&vd_source=5632e926204c9c83c01af7975745ede3,链式基数排序,,,point
287,91,,顺序栈,,,point
288,97,,链栈,,,point
289,93,https://www.bilibili.com/video/BV1nJ411V7bd?p=54&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序栈的初始化,,,point
290,98,https://www.bilibili.com/video/BV1nJ411V7bd?p=57&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链栈的初始化,,,point
291,93,https://www.bilibili.com/video/BV1nJ411V7bd?p=55&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断顺序栈是否为空,,,point
292,94,https://www.bilibili.com/video/BV1nJ411V7bd?p=55&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,求顺序栈的长度,,,point
293,95,https://www.bilibili.com/video/BV1nJ411V7bd?p=55&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,清空顺序栈,,,point
294,,https://www.bilibili.com/video/BV1nJ411V7bd?p=55&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,销毁顺序栈,,,point
295,94,https://www.bilibili.com/video/BV1nJ411V7bd?p=55&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序栈的入栈,,,point
296,95,https://www.bilibili.com/video/BV1nJ411V7bd?p=55&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序栈的出栈,,,point
297,98,https://www.bilibili.com/video/BV1nJ411V7bd/?p=57&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断链栈是否为空,,,point
298,99,https://www.bilibili.com/video/BV1nJ411V7bd/?p=57&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链栈的入栈,,,point
299,99,https://www.bilibili.com/video/BV1nJ411V7bd/?p=57&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链栈的出栈,,,point
306,31,https://www.bilibili.com/video/BV1nJ411V7bd?p=17&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序表的初始化,,,point
307,50,https://www.bilibili.com/video/BV1nJ411V7bd?p=18&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序表中的查找,,,point
308,34,https://www.bilibili.com/video/BV1nJ411V7bd?p=19&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序表的插入,,,point
309,37,https://www.bilibili.com/video/BV1nJ411V7bd?p=20&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序表的删除,,,point
310,39,,顺序表中的修改,,,point
311,43,https://www.bilibili.com/video/BV1nJ411V7bd?p=24&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,单链表的初始化,,,point
312,46,https://www.bilibili.com/video/BV1nJ411V7bd?p=24&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断单链表是否为空,,,point
313,48,https://www.bilibili.com/video/BV1nJ411V7bd?p=25&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,单链表的销毁,,,point
314,48,https://www.bilibili.com/video/BV1nJ411V7bd?p=26&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,单链表的清空,,,point
315,,https://www.bilibili.com/video/BV1nJ411V7bd?p=27&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,求单链表的表长,,,point
316,51,,单链表中按值查找,,,point
317,47,https://www.bilibili.com/video/BV1nJ411V7bd?p=30&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,单链表中的插入,,,point
318,48,https://www.bilibili.com/video/BV1nJ411V7bd?p=31&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,单链表中的删除,,,point
319,52,,单链表的创立,,,point
320,52,https://www.bilibili.com/video/BV1nJ411V7bd?p=33&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,头插法,,,point
321,53,https://www.bilibili.com/video/BV1nJ411V7bd?p=34&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,尾插法,,,point
322,61,https://www.bilibili.com/video/BV1nJ411V7bd?p=35&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,单向循环链表,循环单链表是单链表的另一种形式，其结构feature链表中最后一个结点的指针域不再是结束标记，而是指向整个链表的第一个结点，从而使链表形成一个环。,从一个结点出发，无论这个结点位于链表的哪里，都可以找到其他任何一个结点，而单链表不行。,point
323,65,https://www.bilibili.com/video/BV1nJ411V7bd?p=37&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,双向循环链表,双向链表也叫双链表，是链表的一种，链表的每个数据结点中都有两个指针，分别指向直接后继和直接前驱，从双向链表中的任意一个结点开始，都可以很快速地访问它的前驱结点和后继结点，链表结构的使用多数都是构造双向循环链表。,从一个结点出发，无论这个结点位于链表的哪里，都可以双向的找到其他任何一个结点。,point
324,66,,双向链表的初始化,,,point
325,68,,双向链表的遍历,,,point
326,66,https://www.bilibili.com/video/BV1nJ411V7bd?p=38&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,双向链表的插入,,,point
327,67,https://www.bilibili.com/video/BV1nJ411V7bd?p=39&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,双向链表的删除,,,point
328,,https://www.bilibili.com/video/BV1nJ411V7bd?p=42&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,线性表的合并,,,point
329,,,有序表的合并,,,point
330,,https://www.bilibili.com/video/BV1nJ411V7bd?p=43&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序表实现,,,point
331,,https://www.bilibili.com/video/BV1nJ411V7bd?p=44&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链表实现,,,point
332,76,https://baike.baidu.com/item/BF%E7%AE%97%E6%B3%95?fromModule=lemma_search-box,BF算法,BF算法，即暴力 (Brute Force)算法，是普通的 模式匹配 算法，BF算法的思想就是将目标串S的第一个字符与模式串T的第一个字符进行匹配，若相等，则继续比较S的第二个字符和 T的第二个字符；若不相等，则比较S的第二个字符和T的第一个字符，依次比较下去，直到得出最后的匹配结果。,这种算法的字符串匹配方式比较简单，相应的性能也不高,point
333,,https://blog.csdn.net/attack_breast/article/details/104538265,RK算法,RK 算法的思路是这样的：我们通过哈希算法对主串中的 n-m+1 个子串分别求哈希值，然后逐个与模式串的哈希值比较大小。如果某个子串的哈希值与模式串相等，那就说明对应的子串和模式串匹配了（这里需要考虑哈希冲突的问题，即设计合理的哈希算法,PK算法是基于朴素的字符串匹配算法的一种改造，引入哈希算法，从而降低了算法的时间复杂度。,point
334,77,https://baike.baidu.com/item/kmp%E7%AE%97%E6%B3%95/10951804?fr=aladdin,KMP算法,KMP 算法的核心思想和 BM 算法非常相近。我们假设主串是 a，模式串是 b。在模式串与主串匹配的过程中，当遇到不可匹配的字符的时候，通过一些规律，可以将模式串往后多滑动几位，跳过那些肯定不会匹配的情况。,KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。,point
335,,https://baike.baidu.com/item/BM%E7%AE%97%E6%B3%95?fromModule=lemma_search-box,BM算法,BM算法借助“坏字符规则”和“好后缀规则”，在每一轮比较时，让模式串尽可能多挪动几位，减少了BF算法中很多无谓的比较。,BM 算法利用模式串本身的feature，在模式串中某个字符与主串不能匹配的时候，将模式串往后多滑动几位，以此来减少不必要的字符比较，提高匹配的效率。,point
340,98,https://www.bilibili.com/video/BV1nJ411V7bd/?p=57&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,取链栈顶元素,,,point
341,,,顺序队列,,,point
342,,,链队列,,,point
343,,https://www.bilibili.com/video/BV1nJ411V7bd?p=59&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序队列的初始化,,,point
344,,https://www.bilibili.com/video/BV1nJ411V7bd?p=61&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序队列的入栈,,,point
345,,https://www.bilibili.com/video/BV1nJ411V7bd?p=61&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,顺序队列的出栈,,,point
346,,https://www.bilibili.com/video/BV1nJ411V7bd?p=61&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断顺序队列是否为空,,,point
347,,https://www.bilibili.com/video/BV1nJ411V7bd?p=61&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断顺序队列是否满,,,point
348,,https://www.bilibili.com/video/BV1nJ411V7bd?p=61&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,求顺序队列长度,,,point
349,,https://www.bilibili.com/video/BV1nJ411V7bd?p=61&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,取顺序队列队头元素,,,point
350,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链队列的初始化,,,point
351,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链队列的入栈,,,point
352,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链队列的出栈,,,point
353,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断链队列是否为空,,,point
354,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,判断链队列是否满,,,point
355,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,求链队列长度,,,point
356,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,取链队列队头元素,,,point
357,,https://www.bilibili.com/video/BV1nJ411V7bd?p=62&vd_source=6b2041effc0854b66a36c4c3e12ac9fa,链队列的销毁,,,point
358,,,循环队列,,,point
361,147,https://www.bilibili.com/video/BV1nJ411V7bd?p=69,数组的抽象类型定义,,,point
362,147,https://www.bilibili.com/video/BV1nJ411V7bd?p=70,数组的存储结构,,,point
364,,,特殊矩阵的压缩存储结构,若多个元素的值都相同，则只分配一个元素的值的存储空间，零元素不占存储空间，称之为矩阵的压缩存储。,,point
365,150,,对称矩阵,在n×n的矩阵中，满足aij=aji的矩阵称为对称矩阵,矩阵按照对角线对称，存储时只需要存储上或下三角的数据元素,point
366,,https://www.bilibili.com/video/BV1nJ411V7bd?p=71,对称矩阵的压缩存储,,,point
367,151,,三角矩阵,对角线以下（或以上）的数据元素全部为常数的矩阵称为三角矩阵,在存储三角矩阵时，重复的常数部分可以共享一个元素存储空间。,point
368,,https://www.bilibili.com/video/BV1nJ411V7bd?p=72,三角矩阵的压缩存储,,,point
369,152,,对角矩阵,在n×n的矩阵中，所有非零元素都集中在以主对角线对中心的带状区域中，其余值全部为0，称为对角矩阵,在存储对角矩阵时，元素值为0的元素可以不用存储，常见的对角矩阵有三对角矩阵、五对角矩阵、七对角矩阵,point
370,,https://www.bilibili.com/video/BV1nJ411V7bd?p=72,对角矩阵的压缩存储,,,point
371,153,,稀疏矩阵,在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵,稀疏矩阵的非零元素占总空间的5%以下。,point
372,,https://www.xuetangx.com/learn/ncepu0809%201005336/ncepu0809%201005336/14771371/video/30447007,稀疏矩阵的压缩存储,,,point
373,,,稀疏矩阵的转置,,,point
374,154,https://www.xuetangx.com/learn/ncepu0809%201005336/ncepu0809%201005336/14771371/video/30447003,稀疏矩阵转置算法,,,point
375,154,https://www.xuetangx.com/learn/ncepu0809%201005336/ncepu0809%201005336/14771371/video/30447003,稀疏矩阵的转置算法的改进,,,point
376,,,稀疏矩阵的乘法,,,point
377,156,,稀疏矩阵的乘法,,,point
379,164,https://www.bilibili.com/video/BV1nJ411V7bd?p=74,广义表的表示,,,point
380,164,https://www.bilibili.com/video/BV1nJ411V7bd?p=74,广义表的性质,,,point
381,,https://www.bilibili.com/video/BV1nJ411V7bd?p=74,广义表与线性表的区别,,,point
382,,,广义表的基本运算,,,point
383,169,https://www.bilibili.com/video/BV1nJ411V7bd?p=74,求表头,,,point
384,169,https://www.bilibili.com/video/BV1nJ411V7bd?p=74,求表尾,,,point
385,170,https://www.xuetangx.com/learn/ncepu0809%201005336/ncepu0809%201005336/14771371/video/30447011,求长度,,,point
386,170,https://www.xuetangx.com/learn/ncepu0809%201005336/ncepu0809%201005336/14771371/video/30447011,求深度,,,point
387,,https://www.bilibili.com/video/BV1nJ411V7bd?p=75,广义表的案例分析与实现,,,point
389,176,,树,树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。,树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。树中所有结点可以有零个或多个后继。,point
390,179,https://www.bilibili.com/video/BV1nJ411V7bd?p=78,二叉树,二叉树是树中的一类特殊的树，其特殊在树中所有节点的度都小于等于2，而且二叉树的子树有左右之分，而且次序不能颠倒,每个结点最多有俩孩子（二叉树中不存在度大于2的结点）；二叉树可以是空集合，根可以有空的左子树和空的右子树。二叉树有左右之分，次序不能颠倒。,point
391,180,,满二叉树,二叉树中每层的结点数都达到最大值，被称为满二叉树,二叉树中每层的结点数都达到最大值，被称为满二叉树,point
392,180,,平衡树,任意节点的子树的高度差都小于等于1的树称之为平衡树,平衡树的左子树和右子树都是一颗平衡树,point
393,180,,完全二叉树,一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下一层的叶结点集中在靠左的若干位置上。这样的二叉树称为完全二叉树。,一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下一层的叶结点集中在靠左的若干位置上。这样的二叉树称为完全二叉树。,point
394,,,二叉树的性质和存储结构,,,point
395,181,https://www.bilibili.com/video/BV1nJ411V7bd?p=81,二叉树的性质,,,point
396,,,二叉树的存储结构,,,point
397,185,https://www.bilibili.com/video/BV1nJ411V7bd?p=84,二叉树的顺序存储,,,point
399,187,https://www.bilibili.com/video/BV1nJ411V7bd?p=85,二叉树的链式存储,,,point
401,,,二叉树递归遍历及其应用,,,point
402,188,https://www.bilibili.com/video/BV1nJ411V7bd?p=86,二叉树的递归遍历,,,point
403,,,二叉树递归遍历的应用,,,point
404,199,https://www.bilibili.com/video/BV1nJ411V7bd?p=92,二叉树的创建,,,point
405,,https://www.bilibili.com/video/BV1nJ411V7bd?p=93,二叉树的复制,,,point
406,212,https://www.bilibili.com/video/BV1nJ411V7bd?p=93,二叉树的结点,,,point
407,212,https://www.bilibili.com/video/BV1nJ411V7bd?p=93,二叉树的叶子结点,,,point
408,212,,二叉树的深度,,,point
410,205,https://www.bilibili.com/video/BV1nJ411V7bd?p=87,由遍历序列确定二叉树,,,point
411,,,二叉树层次遍历及其应用,,,point
412,197,https://www.bilibili.com/video/BV1nJ411V7bd?p=91,二叉树的层次遍历,,,point
413,,,二叉树的层次遍历应用,,,point
414,203,,读边法创建二叉链表,,,point
415,205,,完全二叉树的判断,,,point
416,204,,二叉树的宽度,,,point
417,,,树和森林的存储,,,point
418,225,https://www.bilibili.com/video/BV1nJ411V7bd?p=95,双亲表示法,,,point
419,226,https://www.bilibili.com/video/BV1nJ411V7bd?p=96,孩子链表表示法,,,point
420,227,,孩子双亲表示法,,,point
421,228,https://www.bilibili.com/video/BV1nJ411V7bd?p=97,孩子兄弟表示法,,,point
422,,,树的基本操作,,,point
423,237,https://www.bilibili.com/video/BV1nJ411V7bd?p=99,树的遍历,,,point
424,230,,树的查找,,,point
425,233,,树的深度,,,point
426,,,树的路径,,,point
427,229,,树的创建,,,point
428,232,,树的删除,,,point
429,231,,树的插入,,,point
430,237,https://www.bilibili.com/video/BV1nJ411V7bd?p=98,树与二叉树的转换,,,point
431,239,https://www.bilibili.com/video/BV1nJ411V7bd?p=99,树与森林的转换,,,point
432,238,https://www.bilibili.com/video/BV1nJ411V7bd?p=99,森林的遍历,,,point
434,241,https://www.bilibili.com/video/BV1nJ411V7bd?p=102,哈夫曼树的基本概念,,,point
435,243,https://www.bilibili.com/video/BV1nJ411V7bd?p=103,哈夫曼树的构造,,,point
436,246,https://www.bilibili.com/video/BV1nJ411V7bd?p=104,哈夫曼树的算法实现,,,point
437,,,哈夫曼编码,,,point
438,246,https://www.bilibili.com/video/BV1nJ411V7bd?p=105,哈夫曼编码的思想,,,point
439,246,https://www.bilibili.com/video/BV1nJ411V7bd?p=106,哈夫曼编码的实现,,,point
440,249,https://www.bilibili.com/video/BV1nJ411V7bd?p=107,文件的编码和译码,,,point
442,,,特殊二叉树,,,point
447,258,,无向图,图上的边没有方向的图称为无向图,无,point
448,258,,有向图,图上的两点间的边（称之为弧）存在方向的图称为有向图,无,point
449,258,,完全图,任意两个点都有一条边边相连的图,完全图中的任意两点都可达,point
450,258,,连通图,如果对于图中任意两个顶点u、v，都有(u，v)∈E，则称G是连通图,,point
452,,,图的邻接矩阵,图的邻接矩阵是用两个数组来表示图。一个一维数组存储图中顶点的信息，一个二维数组存储图中边的信息。,,point
454,262,https://www.bilibili.com/video/BV1nJ411V7bd?p=112,无向图的邻接矩阵,,,point
455,262,https://www.bilibili.com/video/BV1nJ411V7bd?p=113,有向图的邻接矩阵,,,point
456,264,https://www.bilibili.com/video/BV1nJ411V7bd?p=114,邻接矩阵创建无向图,,,point
457,,,图的邻接表,邻接表是图的一种链式存储方式，由一个顺序存储的定点表和多个链式存储的边表组成。,邻接表由表头节点和表节点两部分组成，图中每个顶点均对应一个存储在数组中的表头节点。如果这个表头节点所对应的顶点存在邻接节点，则把邻接节点依次存放于表头节点所指向的单向链表中。,point
459,266,https://www.bilibili.com/video/BV1nJ411V7bd?p=116,无向图的邻接表,,,point
460,266,https://www.bilibili.com/video/BV1nJ411V7bd?p=117,有向图的邻接表,,,point
461,268,https://www.bilibili.com/video/BV1nJ411V7bd?p=118,邻接表的建立算法,,,point
462,269,https://www.bilibili.com/video/BV1nJ411V7bd?p=119,邻接表与邻接矩阵的关系,,,point
463,270,https://www.bilibili.com/video/BV1nJ411V7bd?p=120,十字链表,,,point
464,271,https://www.bilibili.com/video/BV1nJ411V7bd?p=121,邻接多重表,,,point
466,,,深度优先遍历,递归的深入探索图中未被访问过的邻接点的方法称之为图的深度优先遍历。,图的深度优先遍历类似于树的先根遍历,point
467,273,https://www.bilibili.com/video/BV1nJ411V7bd?p=122,深度优先遍历的思想,,,point
468,274,https://www.bilibili.com/video/BV1nJ411V7bd?p=123,邻接矩阵的深度优先遍历,,,point
469,274,https://www.bilibili.com/video/BV1nJ411V7bd?p=124,邻接表的深度优先遍历,,,point
470,,,广度优先遍历,按照层次依次遍历图中未被访问过的邻接点的方法称之为图的广度优先遍历。,图的广度优先遍历类似于树的层次遍历,point
471,277,https://www.bilibili.com/video/BV1nJ411V7bd?p=125,广度优先遍历的思想,,,point
472,278,https://www.bilibili.com/video/BV1nJ411V7bd?p=125,邻接矩阵的广度优先遍历,,,point
473,279,https://www.bilibili.com/video/BV1nJ411V7bd?p=125,邻接表的广度优先遍历,,,point
475,286,https://www.bilibili.com/video/BV1nJ411V7bd?p=126,生成树及构造,,,point
476,287,https://www.bilibili.com/video/BV1nJ411V7bd?p=127,最小生成树及典型应用,,,point
477,,https://www.bilibili.com/video/BV1nJ411V7bd?p=128,最小生成树MST性质,,,point
478,290,https://www.bilibili.com/video/BV1nJ411V7bd?p=129,普利姆算法,从某一个顶点（所以存在多个最小生成树）开始构建生成树，每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止，从而生成最小生成树。,,point
479,293,https://www.bilibili.com/video/BV1nJ411V7bd?p=130,克鲁斯卡尔算法,每次选择权值最小的边，使这条边的两头连通（原本已近连通则不选）直到所有结点都连通，从而生成最小生成树,,point
481,298,https://www.bilibili.com/video/BV1nJ411V7bd?p=131,最短路径问题抽象,,,point
482,299,https://www.bilibili.com/video/BV1nJ411V7bd?p=132,迪杰斯特拉算法,,,point
483,311,https://www.bilibili.com/video/BV1nJ411V7bd?p=133,弗洛伊德算法,,,point
486,316,https://www.bilibili.com/video/BV1nJ411V7bd?p=135,AOE网,用边表示活动的网。,,point
487,313,https://www.bilibili.com/video/BV1nJ411V7bd?p=136,AOV网,用顶点表示活动的网。,,point
488,317,,用AOE网表示工程计划,,,point
489,322,,求解关键路径,,,point
502,332,,查找时间复杂度,,,point
503,332,,查找空间复杂度,,,point
504,332,,平均查找长度ASL,,,point
506,333,,顺序查找,,,point
507,335,https://www.bilibili.com/video/BV1nJ411V7bd?p=140&vd_source=5632e926204c9c83c01af7975745ede3,折半查找,,,point
508,339,https://www.bilibili.com/video/BV1nJ411V7bd?p=142&vd_source=5632e926204c9c83c01af7975745ede3,分块查找,,,point
510,345,,二叉排序树,一棵空树，或者是具有下列性质的二叉树：1、若左子树不空，则左子树上所有结点的值均小于它的根结点的值；2、若右子树不空，则右子树上所有结点的值均大于它的根结点的值；3、左、右子树也分别为二叉排序树；,树的结构通常不是一次生成的，而是在查找过程中，当树中不存在关键字等于给定值的结点时再进行插入。新插入的结点一定是一个新添加的叶子结点，并且是查找不成功时查找路径上访问的最后一个结点的左孩子或右孩子结点。,point
511,345,,二叉排序树的初始化,,,point
512,347,https://www.bilibili.com/video/BV1nJ411V7bd?p=147&vd_source=5632e926204c9c83c01af7975745ede3,二叉排序树的插入,,,point
513,349,https://www.bilibili.com/video/BV1nJ411V7bd?p=148&vd_source=5632e926204c9c83c01af7975745ede3,二叉排序树的删除,,,point
514,346,https://www.bilibili.com/video/BV1nJ411V7bd?p=145&vd_source=5632e926204c9c83c01af7975745ede3,二叉排序树的查找,,,point
515,347,,二叉排序树的打印,,,point
516,354,https://www.bilibili.com/video/BV1nJ411V7bd?p=150&vd_source=5632e926204c9c83c01af7975745ede3,平衡二叉树,平衡树(Balance Tree，BT) 指的是，任意节点的子树的高度差都小于等于1。常见的符合平衡树的有，B树（多路平衡搜索树）、AVL树（二叉平衡搜索树）等。平衡树可以完成集合的一系列操作，时间复杂度和空间复杂度相对于“2-3树”要低，在完成集合的一系列操作中始终保持平衡，为大型数据库的组织、索引提供了一条新的途径。,是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。,point
517,,,平衡二叉树的初始化,,,point
518,360,https://www.bilibili.com/video/BV1nJ411V7bd?p=152&vd_source=5632e926204c9c83c01af7975745ede3,平衡二叉树的插入,,,point
519,362,,平衡二叉树的删除,,,point
